package com.example.studentcourse.service;

import com.example.studentcourse.model.Course;
import com.example.studentcourse.model.Student;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class StudentService {
    private static final String URL = "https://hccs-advancejava.s3.amazonaws.com/student_course.json";

    @Autowired
    private RestTemplate restTemplate;

    public List<Student> fetchStudents() throws Exception {
        String json = restTemplate.getForObject(URL, String.class);
        ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.readValue(json, new TypeReference<List<Student>>() {});
    }

    public List<Student> searchStudentsByFirstName(String firstName) throws Exception {
        List<Student> students = fetchStudents();
        return students.stream()
                .filter(student -> student.getFirstName().equalsIgnoreCase(firstName))
                .collect(Collectors.toList());
    }

    public List<Course> searchCoursesByCourseNumber(String courseNumber, Student student) {
        return student.getCourses().stream()
                .filter(course -> course.getCourseNumber().equalsIgnoreCase(courseNumber))
                .collect(Collectors.toList());
    }

    public double calculateGPA(Student student) {
        List<Course> courses = student.getCourses();
        if (courses.isEmpty()) {
            return 0.0; // No courses, GPA is 0
        }

        double totalPoints = 0.0;
        int totalCreditHours = 0;

        for (Course course : courses) {
            totalPoints += getGradePoints(course.getGrade()) * course.getCreditHours();
            totalCreditHours += course.getCreditHours();
        }

        return totalCreditHours == 0 ? 0.0 : totalPoints / totalCreditHours;
    }

    private double getGradePoints(String grade) {
        switch (grade.toUpperCase()) {
            case "A":
                return 4.0;
            case "B":
                return 3.0;
            case "C":
                return 2.0;
            case "D":
                return 1.0;
            case "F":
                return 0.0;
            default:
                return 0.0; 
        }
    }
}